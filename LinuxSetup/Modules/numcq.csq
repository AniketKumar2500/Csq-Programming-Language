#ifndef NUMCQ_CSQ
#define NUMCQ_CSQ

    #include "Regex.csq"

    /*This class allows to use arrays with lots of features
    which can be used in Data Science*/
    template<typename t>
    class array{

        private:
            vect(t,_arr_);
            def freq(t target){
                int c=0;
                forE(i,this->_arr_){
                    when i==target then
                        c++;
                    endhere
                
                }
                return c;
            }
        public:

            //Constructors
            //C1
            __init__(array)(vect(t,i)){
                this->_arr_=i;
            }
            //C2
            __init__(array)(){
            }
            //Addition of element
            
            //This methods will add the n number of elements in the array
            def add(t e){
                this->_arr_.push_back(e);
            }
            //This methods will add the n number of elements in the array
            template<typename... Args>
            def add(t e,Args... args){
                this->_arr_.push_back(e);
                add(args...);
            }

            //This methods will return the vector of the array elements
            def asVect(){
                return this->_arr_;
            }

            //Len of array
            def len(){
                return this->_arr_.size();
            }

            //Reading of element
            def read(int index);
            def readAll();
            def readStrs();
            //Deleting of element
            def pop();
            //Updation of element
            def update(int index,t elment);

            //Arithmetic Operations
            def sum();
            def diff();
            def product();
            def quotent();
            
            //Related to datascience
            def mean();
            def min();
            def max();
            def count(t target);
    };

    //Methods of array class

    //This method will read and return the element on the index position given
    template<typename t>
    def array<t>::read(int index){
        return this->_arr_.at(index);
    }

    //This method will read and return all the non str elements in the form of str
    template<typename t>
    def array<t>::readAll(){
        str ret="[ ";
        forE(i,this->_arr_){
            ret.String+=to_string(i)+" ";
        }
        ret.String+="]";
        return ret;
    }

    //This method will read and return all the str elements in the form of str
    template<typename t>
    def array<t>::readStrs(){
        str ret="[ ";
        forE(i,this->_arr_){
            ret.String+=i.String+" ";
        }
        ret.String+="]";
        return ret;
    }

    //This method will delete the element from the last
    template<typename t>
    def array<t>::pop(){
        this->_arr_.pop_back();
    }

    //This method will update the element on the given index
    template<typename t>
    def array<t>::update(int index,t element){
        this->_arr_.at(index)=element;
    }

    //Arithmetic Methods

    //This methods will return the sum of elements
    template<typename t>
    def array<t>::sum(){
        t s=0;
        forE(i,this->_arr_){
            s+=i;
        }
        return s;
    }

    //This methods will return the difference of elements
    template<typename t>
    def array<t>::diff(){
        t d=0;
        forE(i,this->_arr_){
            d-=i;
        }
        return d;
    }

    //This methods will return the product of elements
    template<typename t>
    def array<t>::product(){
        t p=1;
        forE(i,this->_arr_){
            p*=i;
        }
        return p;
    }

    //This methods will return the sum of elements
    template<typename t>
    def array<t>::quotent(){
        t q=1;
        forE(i,this->_arr_){
            q/=i;
        }
        return q;
    }

    //Methods related to Data Science

    //This methods will return the mean of elements
    template<typename t>
    def array<t>::mean(){
        int s=0;
        forE(i,this->_arr_){
            s+=i;
        }
        return s/this->_arr_.size();
    }

    // //This methods will return the mode of elements
    // template<typename t>
    // def array<t>::mode(){
    //     int lc=freq(this->_arr_.at(0));
    //     array<t> ar;
    //     forE(i,this->_arr_){
            
    //     }
    //     return lc;
    // }

    //This methods will return the frequency of the element
    template<typename t>
    def array<t>::count(t target){
        int c=0;
        forE(i,this->_arr_){
            when i==target then
                c++;
            endhere
        }
        return c;
    }

    //This methods will return the max element in the array
    template<typename t>
    def array<t>::max(){
        t m=this->_arr_[0];
        forE(i,this->_arr_){
            if(m<i){
                m=i;
            }
        }
        return m;
    }

    //This methods will return the min element in the array
    template<typename t>
    def array<t>::min(){
        t m=this->_arr_[0];
        forE(i,this->_arr_){
            if(m>i){
                m=i;
            }
        }
        return m;
    }

#endif