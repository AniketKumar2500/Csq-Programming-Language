def ->Used to define a function in which you don't have to put return type
lam ->Using this you can create functions inside main
func(name,args,code) ->Using this you can create functions in one line
var -> Using this you can create variables in which you don't have to define it's type
let -> Same as var
_start_ ->Using this you can start a scope
endhere ->Using this you can end a scope
when -> This is same as if statement
elif -> This is same as else if
_if_ -> Same as when
so -> Used after if condition and in _for_
then -> Same as so but here you don't have to put stating curly brace
forR(i,from,condition,steps) -> Loop for increment mode
forAR(i,from,condition,steps) -> Loop for decrement mode
forE(_var_,data) -> Element loop
_for_ -> Same as for
constructor(classname) -> Used to define a constructor
_end_ } -> Same as endhere
__Cons__(classname) -> Same as constructor
__init__(classname) -> Same as __Cons__
inherit(classname) -> Used for inheritence
as(from,to) -> This can create an alias of a datatype
none -> \0
vect(type,var_) -> Used to define vector
Type(var) -> Returns type of the variables