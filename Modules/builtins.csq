#if !defined(BUILTINS_CSQ)
#define BUILTINS_CSQ

#include "syntax.csq"

    /////////////////////CODE/////////////////////


    /*This is a datatype by which we can use strings*/

    class str
    {
        public:

            //This var will store the string in the form of std::string
            std::string String;
            //This var will store the string in the form of const char*
            const char* Cchar;

            /////////////////////Constructor Section////////////////////

            //Constructor1
            __init__(str)(std::string val)
            {
                this->String=val;
            }
            //Constructor2
            __init__(str)(const char* val)
            {
                this->String=val;
            }
            //Constructor3
            __init__(str)(const str& val)
            {
                this->String=val.String;
                this->Cchar=val.Cchar;
            }
            //Constructor4
            __init__(str)(int val)
            {
                this->String=to_string(val);
                this->Cchar=to_string(val).c_str();
            }
            //Constructor5
            __init__(str)(double val)
            {
                this->String=to_string(val);
                this->Cchar=to_string(val).c_str();
            }
            //Constructor6
            __init__(str)(){}


            ///////////////////Method Section/////////////////////////////
            
            //Update methods
            def update(string val);
            def update(const char* val);
            def update(const str& val);
            def update(int value);
            def update(double value);
            //Join method
            /*Join method to join strings*/
            template <typename T>
            void join(T t) 
            {
                this->String+=t;
            }
            /*Join method to join strings
            */
            template<typename T, typename... Args>
            void join(T t, Args... args) // recursive variadic function
            {
                this->String+=t;
                join(args...) ;
            }

            //EraseSubStr method
            def eraseSubStr(const std::string & target);
            //Get obj
            str& obj();
            //Char at method
            def charAt(int index);

            //Conversion
            def toInt();
            def toDouble();

            //len
            def len();

    };
    //Methods of str class

    //This method will update the String on the basis of string argument
    def str::update(string val){
        this->String=val;
    }

    //This method will update the String on the basis of const char* argument
    def str::update(const char* val){
        this->String=val;
    }
    //This method will let you assing other str obj into this obj
    def str::update(const str& val){
        this->String=val.String;
    }
    //This method will update the String by converting int into string
    def str::update(int value){
        this->String=to_string(value);
    }
    //This method will update the String by converting double into string
    def str::update(double value){
        this->String=to_string(value);
    }

    //This method will remove all sub strings in a main string
    def str::eraseSubStr(const std::string & target)
    {
        size_t pos = std::string::npos;
        while ((pos  = this->String.find(target) )!= std::string::npos)
        {
            this->String.erase(pos, target.length());
        }
    }

    //This method will return the str object
    str& str::obj(){
        return *this;
    }

    //This method will return the char present on the given index
    def str::charAt(int index)
    {
        return this->String[index];
    }

    //This method will convert str to int
    def str::toInt(){
        return stoi(this->String);
    }

    //This method will convert str to double
    def str::toDouble(){
        return stod(this->String);
    }

    // This method will return the length of the string
    def str::len(){
        return this->String.length();
    }

    /*            boolean class This class allow to perform tasks on bool . the return type will beonly in True & False.*/
    class boolean
    {
        private:
            /* data */

    public:
        bool booldata;
        boolean(bool operation);
        def getBoot(bool opp);
    };

    boolean::boolean(bool operation)
    {
        booldata=operation;

    }

    def boolean::getBoot(bool opp)
    {
        return opp;
    }


    /*
    any is a class which can store the values of multiple type.
    This class stores the values according to the type given as
    constructor argument.

    Eg:
        any obj=44;  //this is int which is being given.
        any obj2="hi"; //this is str which is being given.
    */
    class any
    {
        
        private:
            str __type__var;
        public:

            int intval;
            double doubval;
            str strval;
            float fval;
            char chval;

            any(int value)
            {
                intval=value;
                __type__var.String=Type(value);
            }

            any(double value)
            {
                doubval=value;
                __type__var.String=Type(value);
            }

            any(float value)
            {
                fval=value;
                __type__var.String=Type(value);
            }

            any(str value)
            {
                strval.String=value.String;
                __type__var.String=Type(value);
            }

            any(const char* value)
            {
                strval.String=value;
                __type__var.String=Type(value);
            }

            any(char value)
            {
                chval=value;
                __type__var.String=Type(value);
            }
            //This method will return the return type of the value
            def returnType()
            {
                return __type__var;
            }        
    };

    ///////////////////////////////////////////COLLECTIONS SECTION////////////////////////////

    /////////////////////////////////LIST COLLECTION SECTION///////////////////////////
    //List is collection and it is a class which allows to store hetrogeneous values and are easy to use.
    class list
    {
        private:
            vector<int> vi;
            vector<str> vs;
            vector<double> vd;
        public:
            //Addition
            def push(int element);
            def push(double element);
            def push(str element);
            // def pushInt(int element);
            //Reading
            def readStr(int index);
            def readInt(int index);
            def readDouble(int index);
            def getStrAsStr();
            def getIntAsStr();
            def getDoubleAsStr();
            //Deleting
            def popI()
            {
                vi.pop_back();
            }
            def popDoub(int index)
            {
                vd.pop_back();
            }
            def popStr(int index)
            {
                vs.pop_back();
            }

            //Size reading
            int len=vd.size()+vs.size()+vi.size();

    };

    /////////Methods of list///////////////////

    //Addition of element

    def list::push(int element)
    {
        vi.push_back(element);
    }

    def list::push(str element)
    {
        vs.push_back(element);
    }

    def list::push(double element)
    {
        vd.push_back(element);
    }


    ////////Reading Methods//////////

    //This method will read Int value 
    def list::readInt(int index)
    {
        return vi[index];
    }

    //This method will read str value 
    def list::readStr(int index)
    {
        return vs[index];
    }

    //This method will read double value 
    def list::readDouble(int index)
    {
        return vd[index];
    }

    //This method will return the list of str elements as str
    def list::getStrAsStr()
    {
        str v="[ ";
        forE(i,vs)
        {
            v.String+=i.String+" ";
        }
        v.String+="]";
        return v;
    }


    //This method will return the list of int elements as str
    def list::getIntAsStr()
    {
        str v="[ ";
        forE(i,vi)
        {
            v.String+=to_string(i)+" ";
        }
        v.String+="]";
        return v;
    }

    //This method will return the list of double elements as str
    def list::getDoubleAsStr()
    {
        str v="[ ";
        forE(i,vd)
        {
            v.String+=to_string(i)+" ";
        }
        v.String+="]";
        return v;
    }
    ///////////////////////////////LIST CLASS SECTION ENDS ////////////////////////////


    ///////////////////////////////DICT CLASS SECTION////////////////////////////////
    //This class allows to use dictionaries
    template<typename ktype, typename valueT>
    class dict
    {
        private:
            vector<ktype> keys;
            vector<valueT> values;
        public:
            //This method will add the key value pair
            def add(ktype key,valueT value)
            {
                keys.push_back(key);
                values.push_back(value);
            }

            //This method will return the value of the key
            def read(ktype key)
            {
                valueT v;
                forR(i,0,i<keys.size(),1)
                    _if_ keys[i]==key so
                    {
                        v=values[i];
                    }
                endhere
                return v;
            }
    };
    ///////////////////////////////DICT CLASS SECTION ENDS////////////////////////////


    //Output Statements
    /*Print function will print into console*/
    template <typename T>
    void print(T t) 
    {
        cout<<t;
    }


    /*Print function will print into console*/
    template<typename T, typename... Args>
    void print(T t, Args... args) // recursive variadic function
    {
        
        cout<<t;
        print(args...) ;
    }

    /*Println function will print into console with newline*/
    template <typename T>
    void println(T t) 
    {
        cout<<t<<"\n";
    }
    /*Println function will print into console with new line*/
    template<typename T, typename... Args>
    void println(T t, Args... args) // recursive variadic function
    {
        // stringVal+=t;
        cout<<t<<"\n";
        print(args...) ;
    }

    def input(str prompt=""){
        print(prompt.String);
        string v;
        getline(cin,v);
        return str(v);

    }


    //SYSTEM namespace

    /*This namespace includes all the functions releted to I/O*/
    namespace System
    {
        //This class allows to print any value into the console
        class out
        {
            public:
                /*Print function will print into console*/
                template <typename T>
                void print(T t) 
                {
                    cout<<t;
                }


                /*Print function will print into console*/
                template<typename T, typename... Args>
                void print(T t, Args... args) // recursive variadic function
                {
                    
                    cout<<t;
                    print(args...) ;
                }
                /*Println function will print into console with newline*/
                template <typename T>
                void println(T t) 
                {
                    cout<<t<<"\n";
                }
                /*Println function will print into console with new line*/
                template<typename T, typename... Args>
                void println(T t, Args... args) // recursive variadic function
                {
                    // stringVal+=t;
                    cout<<t<<"\n";
                    print(args...) ;
                }

        };

        //This class allows to get user input
        class scanner
        {
            public:

                //This method will read the values from the console
                def get(str prompt=""){
                    print(prompt.String);
                    string v;
                    getline(cin,v);
                    return str(v);

                }
        }; 
    }


    //This namespace will allow to do tasks with OS
    namespace Os
    {
        //This function runs the command given into the Os
        def sys(str command)
        {
            system(command.String.c_str());
        }

        //This function will return the type of Os in which you are on
        def getOsName()
        {
            #ifdef _WIN32
            return "Windows";
            #elif _WIN64
            return "Windows";
            #elif __APPLE__ || __MACH__
            return "Mac OSX";
            #elif __linux__
            return "Linux";
            #elif __FreeBSD__
            return "FreeBSD";
            #elif __unix || __unix__
            return "Unix";
            #else
            return "Other";
            #endif
        }
    }

    /*
    FileHandling is a class which allows to read and write files*/
    class FileHandling
    {
        
        public:
            //This method will help us to write the file
            def write(str path,str value)
            {   ofstream fout(path.String);
                fout<<value.String;
            }
            //This method will help us to read the file , but note this returns a str obj;
            def read(str path)
            {
                string Text;
                str text;
                // Read from the text file
                ifstream ReadFile(path.String);
                while (getline(ReadFile, Text)) 
                {
                    text.String+=Text+"\n";
                }
                return text;
            }

            def rem(str pathparam)
            {
                remove(pathparam.String.c_str());
            }
    };

    //This class allows to use python in csq programming
    class python
    {
        public:
            //Python code
            str pycode;
            //Path of python file
            str fileloc;

            //Command of python
            str pycom;
            //Constructor
            __init__(python)(str path,str pycom)
            {
                this->fileloc=path;
                this->pycom=pycom;
            }

            //
            def addScript(str code);
            //
            def run();
    };

    //This method will add python code
    def python::addScript(str code)
    {
        this->pycode.String+=code.String+"\n";
    }

    //This method will run the code
    def python::run()
    {
        FileHandling f;
        f.write(this->fileloc,this->pycode);
        Os::sys(this->pycom.String+" "+this->fileloc.String);
    }

    //This class let you create GUI easily
    class gui
    {
        private:
            str code;
        public:

            //Title of the window
            str title;
            //Parent directory
            str parenddir;
            //
            def apply();
            def start();
            def applyweb(str url);

    };

    //This method will apply and setup the env
    def gui::apply()
    {
        python p(this->title.String+".py","python3");
        p.addScript("import webview");
        p.addScript("webview.create_window('"+this->title.String+"','"+this->parenddir.String+"/"+this->title.String+".html"+"')");
        this->code=p.pycode;

    }

    def gui::applyweb(str url)
    {
        python p(this->title.String+".py","python3");
        p.addScript("import webview");
        p.addScript("webview.create_window('"+this->title.String+"','"+url.String+"')");
        p.addScript("webview.start()");
        p.run();
    }

    //This will show the window
    def gui::start()
    {

        python p(this->title.String+".py","python3");   
        p.addScript(code) ;
        p.addScript("webview.start()");
        p.run();

    } 

#endif // BUILTINS_CSQ;;
